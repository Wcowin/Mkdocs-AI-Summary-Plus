# MkDocs AI Summary 自动部署到 GitHub Pages
# 这个工作流会自动构建并部署你的 MkDocs 站点到 GitHub Pages
# 支持所有主流 AI 服务的 API 密钥配置

name: Deploy MkDocs with AI Summary to GitHub Pages

# 触发条件
on:
  # 当推送到 main 分支时触发
  push:
    branches:
      - main
      - master
  # 允许手动触发
  workflow_dispatch:
  # 当有 Pull Request 到 main 分支时也可以触发（可选）
  pull_request:
    branches:
      - main
      - master

# 设置权限，允许写入 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 确保同时只有一个部署在运行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 检出代码
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        # 获取完整历史记录，用于生成更好的摘要
        fetch-depth: 0
    
    # 2. 设置 Python 环境
    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    # 3. 安装依赖
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs
        pip install mkdocs-material
        pip install mkdocs-ai-summary-wcowin
        # 如果有 requirements.txt 文件，也安装其中的依赖
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # 4. 创建缓存目录
    - name: 创建 AI 缓存目录
      run: |
        mkdir -p .ai_cache
        echo "AI 缓存目录已创建"
    
    # 5. 恢复 AI 缓存（可选，用于减少 API 调用）
    - name: 恢复 AI 缓存
      uses: actions/cache@v3
      with:
        path: .ai_cache
        key: ai-cache-${{ hashFiles('docs/**/*.md') }}
        restore-keys: |
          ai-cache-
    
    # 6. 验证 mkdocs.yml 配置
    - name: 验证 MkDocs 配置
      run: |
        if [ ! -f mkdocs.yml ]; then
          echo "错误: 未找到 mkdocs.yml 文件"
          exit 1
        fi
        echo "MkDocs 配置文件验证通过"
        
        # 检查是否配置了 AI Summary 插件
        if grep -q "ai_summary" mkdocs.yml; then
          echo "✅ 检测到 AI Summary 插件配置"
        else
          echo "⚠️  未检测到 AI Summary 插件配置，将使用默认设置"
        fi
    
    # 7. 构建 MkDocs 站点
    - name: 构建 MkDocs 站点
      env:
        # OpenAI API 配置
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
        
        # 智谱 GLM API 配置
        GLM_API_KEY: ${{ secrets.GLM_API_KEY }}
        GLM_BASE_URL: ${{ secrets.GLM_BASE_URL }}
        
        # Anthropic Claude API 配置
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        
        # Google Gemini API 配置
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        
        # Azure OpenAI 配置
        AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
        AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
        AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
        
        # 百度文心一言 API 配置
        BAIDU_API_KEY: ${{ secrets.BAIDU_API_KEY }}
        BAIDU_SECRET_KEY: ${{ secrets.BAIDU_SECRET_KEY }}
        
        # 阿里云通义千问 API 配置
        DASHSCOPE_API_KEY: ${{ secrets.DASHSCOPE_API_KEY }}
        
        # 腾讯云混元 API 配置
        TENCENT_SECRET_ID: ${{ secrets.TENCENT_SECRET_ID }}
        TENCENT_SECRET_KEY: ${{ secrets.TENCENT_SECRET_KEY }}
        
        # 其他通用配置
        AI_SUMMARY_ENABLED: true
        AI_SUMMARY_DEBUG: false
        AI_SUMMARY_CACHE_ENABLED: true
        
        # CI 环境标识
        CI: true
        GITHUB_ACTIONS: true
      run: |
        echo "开始构建 MkDocs 站点..."
        
        # 显示当前配置的 API 密钥（不显示实际值，只显示是否配置）
        echo "=== API 密钥配置状态 ==="
        [ -n "$OPENAI_API_KEY" ] && echo "✅ OpenAI API Key: 已配置" || echo "❌ OpenAI API Key: 未配置"
        [ -n "$GLM_API_KEY" ] && echo "✅ GLM API Key: 已配置" || echo "❌ GLM API Key: 未配置"
        [ -n "$CLAUDE_API_KEY" ] && echo "✅ Claude API Key: 已配置" || echo "❌ Claude API Key: 未配置"
        [ -n "$GEMINI_API_KEY" ] && echo "✅ Gemini API Key: 已配置" || echo "❌ Gemini API Key: 未配置"
        [ -n "$AZURE_OPENAI_API_KEY" ] && echo "✅ Azure OpenAI API Key: 已配置" || echo "❌ Azure OpenAI API Key: 未配置"
        [ -n "$BAIDU_API_KEY" ] && echo "✅ 百度 API Key: 已配置" || echo "❌ 百度 API Key: 未配置"
        [ -n "$DASHSCOPE_API_KEY" ] && echo "✅ 阿里云 API Key: 已配置" || echo "❌ 阿里云 API Key: 未配置"
        [ -n "$TENCENT_SECRET_ID" ] && echo "✅ 腾讯云 API Key: 已配置" || echo "❌ 腾讯云 API Key: 未配置"
        echo "========================"
        
        # 执行构建
        mkdocs build --verbose
        
        echo "✅ MkDocs 站点构建完成"
        
        # 显示构建结果
        if [ -d "site" ]; then
          echo "📁 构建输出目录: site/"
          echo "📄 生成的文件数量: $(find site -type f | wc -l)"
          echo "💾 构建大小: $(du -sh site | cut -f1)"
        else
          echo "❌ 错误: 未找到构建输出目录 'site/'"
          exit 1
        fi
    
    # 8. 上传构建产物
    - name: 上传 Pages 产物
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./site
    
    # 9. 保存 AI 缓存（可选）
    - name: 保存 AI 缓存
      if: always()
      uses: actions/cache/save@v3
      with:
        path: .ai_cache
        key: ai-cache-${{ hashFiles('docs/**/*.md') }}

  # 部署作业
  deploy:
    # 设置环境
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # 依赖构建作业
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    # 部署到 GitHub Pages
    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
      
    # 部署成功通知
    - name: 部署成功通知
      run: |
        echo "🎉 部署成功！"
        echo "📖 站点地址: ${{ steps.deployment.outputs.page_url }}"
        echo "⏰ 部署时间: $(date)"
        echo "🔗 提交: ${{ github.sha }}"

# 错误处理和故障排除说明
# 
# 常见问题解决方案:
# 
# 1. API 密钥未配置:
#    - 前往 GitHub 仓库 Settings > Secrets and variables > Actions
#    - 添加对应的 API 密钥，例如 OPENAI_API_KEY
# 
# 2. 构建失败:
#    - 检查 mkdocs.yml 配置是否正确
#    - 确保 docs/ 目录存在且包含 markdown 文件
#    - 查看构建日志中的具体错误信息
# 
# 3. 部署失败:
#    - 确保仓库设置中启用了 GitHub Pages
#    - 检查 Pages 设置是否选择了 "GitHub Actions" 作为源
# 
# 4. AI 摘要生成失败:
#    - 确保至少配置了一个有效的 API 密钥
#    - 检查 API 密钥是否有足够的配额
#    - 查看构建日志中的 AI 服务错误信息
# 
# 5. 缓存问题:
#    - 如果遇到缓存相关问题，可以在 Actions 页面手动清除缓存
#    - 或者在工作流中添加 cache-version 参数来强制更新缓存